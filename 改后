rm(list = ls())
library(parallel)
cl.cores <- detectCores()
a116=as.character(a116)
a216=as.character(a216)
func <- function(x){
  library(stringi)
  a=a116
  b=a216
  swbidui=function(seq1,seq2){
    seq1=unlist(strsplit(seq1, ''))
    seq2=unlist(strsplit(seq2, ''))
    s1 = ''
    s2 = ''
    best_matrix=matrix(rep(0,(length(seq2)+1)*(length(seq1) + 1)),nrow=length(seq2)+1,ncol=length(seq1)+1,byrow=TRUE)
    for (i in 2:(length(seq2) + 1)){
      for (j in 2:(length(seq1) + 1)){
        if (seq2[i-1]==seq1[j-1]||(seq2[i-1]=="C"&&seq1[j-1]=="T")){
          match = 5
        }else{
          match = 0
        }
        gap1_score = best_matrix[i-1,j] -6
        gap2_score = best_matrix[i,j-1] -6
        match_score = best_matrix[i-1,j-1] + match
        score = max(gap1_score, gap2_score, match_score)
        if (score > 0){
          best_matrix[i,j] = score
        }else{
          best_matrix[i,j] = 0
        }
      }
    }
    
    ttt=which(best_matrix == max(best_matrix), arr.ind = TRUE)
    i= ttt[1,1]
    j= ttt[1,2]
    ks=i
    while (best_matrix[i,j] != 0){
      if (seq2[i-1]==seq1[j-1]||(seq2[i-1]=="C"&&seq1[j-1]=="T")){
        match = 5
      }else{
        match = 0
      }
      if (i > 1 && j > 1 && best_matrix[i,j] == best_matrix[i - 1,j - 1] + match){
        s1 =paste(s1,seq1[j-1],sep='')
        s2 =paste(s2,seq2[i-1],sep='')
        i=i-1
        j=j-1
      }else if(i > 0 && best_matrix[i, j] == best_matrix[i - 1, j] -6){
        s1 =paste(s1,'-',sep='')
        s2 =paste(s2,seq2[i-1],sep='')
        i=i-1
      }else{
        s1 =paste(s1,seq1[j-1],sep='')
        s2 =paste(s2,'-',sep='')
        j =j-1
      }
    }
    ress=c(stri_reverse(s1),stri_reverse(s2),ks)
    return(ress)
    
  }
  return(swbidui(a[x],b[x]))
  
}

##############################################################

num <- c(1:length(a216))
cl <- makeCluster(24) # 初始化四核心集群
parallel::clusterExport(cl,"a116",environment())
parallel::clusterExport(cl,"a216",environment())
results <- parLapply(cl,num,func)#调用parLapply并行计算平方函数
final <- do.call('c',results)#整合结果
stopCluster(cl) # 关闭集群
write.table(final,"fff16",row.names = FALSE,
            col.names = FALSE,quote=FALSE)

###########################################################

cl <- makeCluster(24)
parallel::clusterExport(cl,"a116",environment())
parallel::clusterExport(cl,"a216",environment())
results=c()
for(i in 1:floor(length(a216)/1000)){
  num <- c(((i-1)*1000+1):(i*1000))
  ts=parLapply(cl,num,func)
  results =append(results,ts)
  print(i)
}


num <- c((3531*1000+1):length(a216))
ts=parLapply(cl,num,func)
results =append(results,ts)




final16 <- do.call('c',results)
write.table(final16,"results16",row.names = FALSE,
            col.names = FALSE,quote=FALSE)


